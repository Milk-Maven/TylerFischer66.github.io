/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ivyEnabledInDevMode } from './ivy-enabled-in-dev-mode';
import { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';
/**
 * All provided or injected tokens must have `\@Injectable` decorator
 * (previously, injected tokens without `\@Injectable` were allowed
 * if another decorator was used, e.g. pipes).
 * @param {?} target
 * @return {?}
 */
export function ensureStateClassIsInjectable(target) {
    // `ɵprov` is a static property added by the NGCC compiler. It always exists in
    // AOT mode because this property is added before runtime. If an application is running in
    // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`
    // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.
    ivyEnabledInDevMode().subscribe((/**
     * @param {?} _ivyEnabledInDevMode
     * @return {?}
     */
    function (_ivyEnabledInDevMode) {
        if (_ivyEnabledInDevMode) {
            /** @type {?} */
            /** @nocollapse */ var ngInjectableDef = target.ɵprov;
            if (!ngInjectableDef) {
                // Don't warn if Ivy is disabled or `ɵprov` exists on the class
                console.warn(CONFIG_MESSAGES[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY](target.name));
            }
        }
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5zdXJlLXN0YXRlLWNsYXNzLWlzLWluamVjdGFibGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9pdnkvZW5zdXJlLXN0YXRlLWNsYXNzLWlzLWluamVjdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7Ozs7O0FBTzlFLE1BQU0sVUFBVSw0QkFBNEIsQ0FBQyxNQUFXO0lBQ3RELCtFQUErRTtJQUMvRSwwRkFBMEY7SUFDMUYsaUdBQWlHO0lBQ2pHLHFHQUFxRztJQUNyRyxtQkFBbUIsRUFBRSxDQUFDLFNBQVM7Ozs7SUFBQyxVQUFBLG9CQUFvQjtRQUNsRCxJQUFJLG9CQUFvQixFQUFFOztnQkFDbEIsZUFBZSxHQUFHLE1BQU0sQ0FBQyxLQUFLO1lBQ3BDLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3BCLCtEQUErRDtnQkFDL0QsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLHdCQUF3QixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDdEY7U0FDRjtJQUNILENBQUMsRUFBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGl2eUVuYWJsZWRJbkRldk1vZGUgfSBmcm9tICcuL2l2eS1lbmFibGVkLWluLWRldi1tb2RlJztcbmltcG9ydCB7IENPTkZJR19NRVNTQUdFUywgVkFMSURBVElPTl9DT0RFIH0gZnJvbSAnLi4vY29uZmlncy9tZXNzYWdlcy5jb25maWcnO1xuXG4vKipcbiAqIEFsbCBwcm92aWRlZCBvciBpbmplY3RlZCB0b2tlbnMgbXVzdCBoYXZlIGBASW5qZWN0YWJsZWAgZGVjb3JhdG9yXG4gKiAocHJldmlvdXNseSwgaW5qZWN0ZWQgdG9rZW5zIHdpdGhvdXQgYEBJbmplY3RhYmxlYCB3ZXJlIGFsbG93ZWRcbiAqIGlmIGFub3RoZXIgZGVjb3JhdG9yIHdhcyB1c2VkLCBlLmcuIHBpcGVzKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVN0YXRlQ2xhc3NJc0luamVjdGFibGUodGFyZ2V0OiBhbnkpOiB2b2lkIHtcbiAgLy8gYMm1cHJvdmAgaXMgYSBzdGF0aWMgcHJvcGVydHkgYWRkZWQgYnkgdGhlIE5HQ0MgY29tcGlsZXIuIEl0IGFsd2F5cyBleGlzdHMgaW5cbiAgLy8gQU9UIG1vZGUgYmVjYXVzZSB0aGlzIHByb3BlcnR5IGlzIGFkZGVkIGJlZm9yZSBydW50aW1lLiBJZiBhbiBhcHBsaWNhdGlvbiBpcyBydW5uaW5nIGluXG4gIC8vIEpJVCBtb2RlIHRoZW4gdGhpcyBwcm9wZXJ0eSBjYW4gYmUgYWRkZWQgYnkgdGhlIGBASW5qZWN0YWJsZSgpYCBkZWNvcmF0b3IuIFRoZSBgQEluamVjdGFibGUoKWBcbiAgLy8gZGVjb3JhdG9yIGhhcyB0byBnbyBhZnRlciB0aGUgYEBTdGF0ZSgpYCBkZWNvcmF0b3IsIHRodXMgd2UgcHJldmVudCB1c2VycyBmcm9tIHVud2FudGVkIERJIGVycm9ycy5cbiAgaXZ5RW5hYmxlZEluRGV2TW9kZSgpLnN1YnNjcmliZShfaXZ5RW5hYmxlZEluRGV2TW9kZSA9PiB7XG4gICAgaWYgKF9pdnlFbmFibGVkSW5EZXZNb2RlKSB7XG4gICAgICBjb25zdCBuZ0luamVjdGFibGVEZWYgPSB0YXJnZXQuybVwcm92O1xuICAgICAgaWYgKCFuZ0luamVjdGFibGVEZWYpIHtcbiAgICAgICAgLy8gRG9uJ3Qgd2FybiBpZiBJdnkgaXMgZGlzYWJsZWQgb3IgYMm1cHJvdmAgZXhpc3RzIG9uIHRoZSBjbGFzc1xuICAgICAgICBjb25zb2xlLndhcm4oQ09ORklHX01FU1NBR0VTW1ZBTElEQVRJT05fQ09ERS5VTkRFQ09SQVRFRF9TVEFURV9JTl9JVlldKHRhcmdldC5uYW1lKSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==