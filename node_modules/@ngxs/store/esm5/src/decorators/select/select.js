/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createSelectObservable, createSelectorFn } from './symbols';
/**
 * Decorator for selecting a slice of state from the store.
 * @template T
 * @param {?=} rawSelector
 * @param {...?} paths
 * @return {?}
 */
export function Select(rawSelector) {
    var paths = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        paths[_i - 1] = arguments[_i];
    }
    return (/**
     * @template U, K
     * @param {?} target
     * @param {?} key
     * @return {?}
     */
    function (target, key) {
        var _a;
        /** @type {?} */
        var name = key.toString();
        /** @type {?} */
        var selectorId = "__" + name + "__selector";
        /** @type {?} */
        var selector = createSelectorFn(name, rawSelector, paths);
        Object.defineProperties(target, (_a = {},
            _a[selectorId] = {
                writable: true,
                enumerable: false,
                configurable: true
            },
            _a[name] = {
                enumerable: true,
                configurable: true,
                get: /**
                 * @return {?}
                 */
                function () {
                    return this[selectorId] || (this[selectorId] = createSelectObservable(selector));
                }
            },
            _a));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZGVjb3JhdG9ycy9zZWxlY3Qvc2VsZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBRUwsc0JBQXNCLEVBQ3RCLGdCQUFnQixFQUdqQixNQUFNLFdBQVcsQ0FBQzs7Ozs7Ozs7QUFLbkIsTUFBTSxVQUFVLE1BQU0sQ0FBSSxXQUFlO0lBQUUsZUFBa0I7U0FBbEIsVUFBa0IsRUFBbEIscUJBQWtCLEVBQWxCLElBQWtCO1FBQWxCLDhCQUFrQjs7SUFDM0Q7Ozs7OztJQUFPLFVBR0wsTUFBUyxFQUFFLEdBQU07OztZQUNYLElBQUksR0FBVyxHQUFHLENBQUMsUUFBUSxFQUFFOztZQUM3QixVQUFVLEdBQUcsT0FBSyxJQUFJLGVBQVk7O1lBQ2xDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQztRQUUzRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTTtZQUM1QixHQUFDLFVBQVUsSUFBRztnQkFDWixRQUFRLEVBQUUsSUFBSTtnQkFDZCxVQUFVLEVBQUUsS0FBSztnQkFDakIsWUFBWSxFQUFFLElBQUk7YUFDbkI7WUFDRCxHQUFDLElBQUksSUFBRztnQkFDTixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsWUFBWSxFQUFFLElBQUk7Z0JBQ2xCLEdBQUc7OztnQkFBSDtvQkFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNuRixDQUFDO2FBQ0Y7Z0JBQ0QsQ0FBQztJQUNMLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnRDbGFzcyxcbiAgY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZSxcbiAgY3JlYXRlU2VsZWN0b3JGbixcbiAgUHJvcGVydHlUeXBlLFxuICBTZWxlY3RUeXBlXG59IGZyb20gJy4vc3ltYm9scyc7XG5cbi8qKlxuICogRGVjb3JhdG9yIGZvciBzZWxlY3RpbmcgYSBzbGljZSBvZiBzdGF0ZSBmcm9tIHRoZSBzdG9yZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdDxUPihyYXdTZWxlY3Rvcj86IFQsIC4uLnBhdGhzOiBzdHJpbmdbXSk6IFNlbGVjdFR5cGU8VD4ge1xuICByZXR1cm4gZnVuY3Rpb248XG4gICAgVSBleHRlbmRzIENvbXBvbmVudENsYXNzPGFueT4gJiBSZWNvcmQ8SywgUHJvcGVydHlUeXBlPFQ+PixcbiAgICBLIGV4dGVuZHMgc3RyaW5nXG4gID4odGFyZ2V0OiBVLCBrZXk6IEspOiB2b2lkIHtcbiAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSBrZXkudG9TdHJpbmcoKTtcbiAgICBjb25zdCBzZWxlY3RvcklkID0gYF9fJHtuYW1lfV9fc2VsZWN0b3JgO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JGbihuYW1lLCByYXdTZWxlY3RvciwgcGF0aHMpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCB7XG4gICAgICBbc2VsZWN0b3JJZF06IHtcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBbbmFtZV06IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQoKTogUHJvcGVydHlUeXBlPFQ+IHtcbiAgICAgICAgICByZXR1cm4gdGhpc1tzZWxlY3RvcklkXSB8fCAodGhpc1tzZWxlY3RvcklkXSA9IGNyZWF0ZVNlbGVjdE9ic2VydmFibGUoc2VsZWN0b3IpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuIl19