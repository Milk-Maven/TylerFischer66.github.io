var _a;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var VALIDATION_CODE = {
    STATE_NAME: 'STATE_NAME',
    STATE_UNIQUE: 'STATE_UNIQUE',
    STATE_NAME_PROPERTY: 'STATE_NAME_PROPERTY',
    STATE_DECORATOR: 'STATE_DECORATOR',
    INCORRECT_PRODUCTION: 'INCORRECT_PRODUCTION',
    INCORRECT_DEVELOPMENT: 'INCORRECT_DEVELOPMENT',
    SELECT_FACTORY_NOT_CONNECTED: 'SELECT_FACTORY_NOT_CONNECTED',
    ACTION_DECORATOR: 'ACTION_DECORATOR',
    SELECTOR_DECORATOR: 'SELECTOR_DECORATOR',
    ZONE_WARNING: 'ZONE_WARNING',
    PATCHING_ARRAY: 'PATCHING_ARRAY',
    PATCHING_PRIMITIVE: 'PATCHING_PRIMITIVE',
    UNDECORATED_STATE_IN_IVY: 'UNDECORATED_STATE_IN_IVY',
};
export { VALIDATION_CODE };
/** @type {?} */
export var CONFIG_MESSAGES = (_a = {},
    _a[VALIDATION_CODE.STATE_NAME] = (/**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return name + " is not a valid state name. It needs to be a valid object property name.";
    }),
    _a[VALIDATION_CODE.STATE_NAME_PROPERTY] = (/**
     * @return {?}
     */
    function () { return "States must register a 'name' property"; }),
    _a[VALIDATION_CODE.STATE_UNIQUE] = (/**
     * @param {?} current
     * @param {?} newName
     * @param {?} oldName
     * @return {?}
     */
    function (current, newName, oldName) {
        return "State name '" + current + "' from " + newName + " already exists in " + oldName;
    }),
    _a[VALIDATION_CODE.STATE_DECORATOR] = (/**
     * @return {?}
     */
    function () { return 'States must be decorated with @State() decorator'; }),
    _a[VALIDATION_CODE.INCORRECT_PRODUCTION] = (/**
     * @return {?}
     */
    function () {
        return 'Angular is running in production mode but NGXS is still running in the development mode!\n' +
            'Please set developmentMode to false on the NgxsModule options when in production mode.\n' +
            'NgxsModule.forRoot(states, { developmentMode: !environment.production })';
    }),
    _a[VALIDATION_CODE.INCORRECT_DEVELOPMENT] = (/**
     * @return {?}
     */
    function () {
        return 'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\n' +
            'NgxsModule.forRoot(states, { developmentMode: !environment.production })';
    }),
    _a[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED] = (/**
     * @return {?}
     */
    function () {
        return 'You have forgotten to import the NGXS module!';
    }),
    _a[VALIDATION_CODE.ACTION_DECORATOR] = (/**
     * @return {?}
     */
    function () {
        return '@Action() decorator cannot be used with static methods';
    }),
    _a[VALIDATION_CODE.SELECTOR_DECORATOR] = (/**
     * @return {?}
     */
    function () { return 'Selectors only work on methods'; }),
    _a[VALIDATION_CODE.ZONE_WARNING] = (/**
     * @return {?}
     */
    function () {
        return 'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\n' +
            'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\n' +
            'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })';
    }),
    _a[VALIDATION_CODE.PATCHING_ARRAY] = (/**
     * @return {?}
     */
    function () { return 'Patching arrays is not supported.'; }),
    _a[VALIDATION_CODE.PATCHING_PRIMITIVE] = (/**
     * @return {?}
     */
    function () { return 'Patching primitives is not supported.'; }),
    _a[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY] = (/**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return "'" + name + "' class should be decorated with @Injectable() right after the @State() decorator";
    }),
    _a);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvY29uZmlncy9tZXNzYWdlcy5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztJQUNFLFlBQWEsWUFBWTtJQUN6QixjQUFlLGNBQWM7SUFDN0IscUJBQXNCLHFCQUFxQjtJQUMzQyxpQkFBa0IsaUJBQWlCO0lBQ25DLHNCQUF1QixzQkFBc0I7SUFDN0MsdUJBQXdCLHVCQUF1QjtJQUMvQyw4QkFBK0IsOEJBQThCO0lBQzdELGtCQUFtQixrQkFBa0I7SUFDckMsb0JBQXFCLG9CQUFvQjtJQUN6QyxjQUFlLGNBQWM7SUFDN0IsZ0JBQWlCLGdCQUFnQjtJQUNqQyxvQkFBcUIsb0JBQW9CO0lBQ3pDLDBCQUEyQiwwQkFBMEI7Ozs7QUFHdkQsTUFBTSxLQUFPLGVBQWU7SUFDMUIsR0FBQyxlQUFlLENBQUMsVUFBVTs7OztJQUFHLFVBQUMsSUFBWTtRQUN6QyxPQUFHLElBQUksNkVBQTBFO0lBQWpGLENBQWlGLENBQUE7SUFDbkYsR0FBQyxlQUFlLENBQUMsbUJBQW1COzs7SUFBRyxjQUFNLE9BQUEsd0NBQXdDLEVBQXhDLENBQXdDLENBQUE7SUFDckYsR0FBQyxlQUFlLENBQUMsWUFBWTs7Ozs7O0lBQUcsVUFBQyxPQUFlLEVBQUUsT0FBZSxFQUFFLE9BQWU7UUFDaEYsT0FBQSxpQkFBZSxPQUFPLGVBQVUsT0FBTywyQkFBc0IsT0FBUztJQUF0RSxDQUFzRSxDQUFBO0lBQ3hFLEdBQUMsZUFBZSxDQUFDLGVBQWU7OztJQUFHLGNBQU0sT0FBQSxrREFBa0QsRUFBbEQsQ0FBa0QsQ0FBQTtJQUMzRixHQUFDLGVBQWUsQ0FBQyxvQkFBb0I7OztJQUFHO1FBQ3RDLE9BQUEsNEZBQTRGO1lBQzVGLDBGQUEwRjtZQUMxRiwwRUFBMEU7SUFGMUUsQ0FFMEUsQ0FBQTtJQUM1RSxHQUFDLGVBQWUsQ0FBQyxxQkFBcUI7OztJQUFHO1FBQ3ZDLE9BQUEsOEdBQThHO1lBQzlHLDBFQUEwRTtJQUQxRSxDQUMwRSxDQUFBO0lBQzVFLEdBQUMsZUFBZSxDQUFDLDRCQUE0Qjs7O0lBQUc7UUFDOUMsT0FBQSwrQ0FBK0M7SUFBL0MsQ0FBK0MsQ0FBQTtJQUNqRCxHQUFDLGVBQWUsQ0FBQyxnQkFBZ0I7OztJQUFHO1FBQ2xDLE9BQUEsd0RBQXdEO0lBQXhELENBQXdELENBQUE7SUFDMUQsR0FBQyxlQUFlLENBQUMsa0JBQWtCOzs7SUFBRyxjQUFNLE9BQUEsZ0NBQWdDLEVBQWhDLENBQWdDLENBQUE7SUFDNUUsR0FBQyxlQUFlLENBQUMsWUFBWTs7O0lBQUc7UUFDOUIsT0FBQSw2R0FBNkc7WUFDN0csd0ZBQXdGO1lBQ3hGLDhFQUE4RTtJQUY5RSxDQUU4RSxDQUFBO0lBQ2hGLEdBQUMsZUFBZSxDQUFDLGNBQWM7OztJQUFHLGNBQU0sT0FBQSxtQ0FBbUMsRUFBbkMsQ0FBbUMsQ0FBQTtJQUMzRSxHQUFDLGVBQWUsQ0FBQyxrQkFBa0I7OztJQUFHLGNBQU0sT0FBQSx1Q0FBdUMsRUFBdkMsQ0FBdUMsQ0FBQTtJQUNuRixHQUFDLGVBQWUsQ0FBQyx3QkFBd0I7Ozs7SUFBRyxVQUFDLElBQVk7UUFDdkQsT0FBQSxNQUFJLElBQUksc0ZBQW1GO0lBQTNGLENBQTJGLENBQUE7T0FDOUYiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBWQUxJREFUSU9OX0NPREUge1xuICBTVEFURV9OQU1FID0gJ1NUQVRFX05BTUUnLFxuICBTVEFURV9VTklRVUUgPSAnU1RBVEVfVU5JUVVFJyxcbiAgU1RBVEVfTkFNRV9QUk9QRVJUWSA9ICdTVEFURV9OQU1FX1BST1BFUlRZJyxcbiAgU1RBVEVfREVDT1JBVE9SID0gJ1NUQVRFX0RFQ09SQVRPUicsXG4gIElOQ09SUkVDVF9QUk9EVUNUSU9OID0gJ0lOQ09SUkVDVF9QUk9EVUNUSU9OJyxcbiAgSU5DT1JSRUNUX0RFVkVMT1BNRU5UID0gJ0lOQ09SUkVDVF9ERVZFTE9QTUVOVCcsXG4gIFNFTEVDVF9GQUNUT1JZX05PVF9DT05ORUNURUQgPSAnU0VMRUNUX0ZBQ1RPUllfTk9UX0NPTk5FQ1RFRCcsXG4gIEFDVElPTl9ERUNPUkFUT1IgPSAnQUNUSU9OX0RFQ09SQVRPUicsXG4gIFNFTEVDVE9SX0RFQ09SQVRPUiA9ICdTRUxFQ1RPUl9ERUNPUkFUT1InLFxuICBaT05FX1dBUk5JTkcgPSAnWk9ORV9XQVJOSU5HJyxcbiAgUEFUQ0hJTkdfQVJSQVkgPSAnUEFUQ0hJTkdfQVJSQVknLFxuICBQQVRDSElOR19QUklNSVRJVkUgPSAnUEFUQ0hJTkdfUFJJTUlUSVZFJyxcbiAgVU5ERUNPUkFURURfU1RBVEVfSU5fSVZZID0gJ1VOREVDT1JBVEVEX1NUQVRFX0lOX0lWWSdcbn1cblxuZXhwb3J0IGNvbnN0IENPTkZJR19NRVNTQUdFUyA9IHtcbiAgW1ZBTElEQVRJT05fQ09ERS5TVEFURV9OQU1FXTogKG5hbWU6IHN0cmluZykgPT5cbiAgICBgJHtuYW1lfSBpcyBub3QgYSB2YWxpZCBzdGF0ZSBuYW1lLiBJdCBuZWVkcyB0byBiZSBhIHZhbGlkIG9iamVjdCBwcm9wZXJ0eSBuYW1lLmAsXG4gIFtWQUxJREFUSU9OX0NPREUuU1RBVEVfTkFNRV9QUk9QRVJUWV06ICgpID0+IGBTdGF0ZXMgbXVzdCByZWdpc3RlciBhICduYW1lJyBwcm9wZXJ0eWAsXG4gIFtWQUxJREFUSU9OX0NPREUuU1RBVEVfVU5JUVVFXTogKGN1cnJlbnQ6IHN0cmluZywgbmV3TmFtZTogc3RyaW5nLCBvbGROYW1lOiBzdHJpbmcpID0+XG4gICAgYFN0YXRlIG5hbWUgJyR7Y3VycmVudH0nIGZyb20gJHtuZXdOYW1lfSBhbHJlYWR5IGV4aXN0cyBpbiAke29sZE5hbWV9YCxcbiAgW1ZBTElEQVRJT05fQ09ERS5TVEFURV9ERUNPUkFUT1JdOiAoKSA9PiAnU3RhdGVzIG11c3QgYmUgZGVjb3JhdGVkIHdpdGggQFN0YXRlKCkgZGVjb3JhdG9yJyxcbiAgW1ZBTElEQVRJT05fQ09ERS5JTkNPUlJFQ1RfUFJPRFVDVElPTl06ICgpID0+XG4gICAgJ0FuZ3VsYXIgaXMgcnVubmluZyBpbiBwcm9kdWN0aW9uIG1vZGUgYnV0IE5HWFMgaXMgc3RpbGwgcnVubmluZyBpbiB0aGUgZGV2ZWxvcG1lbnQgbW9kZSFcXG4nICtcbiAgICAnUGxlYXNlIHNldCBkZXZlbG9wbWVudE1vZGUgdG8gZmFsc2Ugb24gdGhlIE5neHNNb2R1bGUgb3B0aW9ucyB3aGVuIGluIHByb2R1Y3Rpb24gbW9kZS5cXG4nICtcbiAgICAnTmd4c01vZHVsZS5mb3JSb290KHN0YXRlcywgeyBkZXZlbG9wbWVudE1vZGU6ICFlbnZpcm9ubWVudC5wcm9kdWN0aW9uIH0pJyxcbiAgW1ZBTElEQVRJT05fQ09ERS5JTkNPUlJFQ1RfREVWRUxPUE1FTlRdOiAoKSA9PlxuICAgICdSRUNPTU1FTkRBVElPTjogU2V0IGRldmVsb3BtZW50TW9kZSB0byB0cnVlIG9uIHRoZSBOZ3hzTW9kdWxlIHdoZW4gQW5ndWxhciBpcyBydW5uaW5nIGluIGRldmVsb3BtZW50IG1vZGUuXFxuJyArXG4gICAgJ05neHNNb2R1bGUuZm9yUm9vdChzdGF0ZXMsIHsgZGV2ZWxvcG1lbnRNb2RlOiAhZW52aXJvbm1lbnQucHJvZHVjdGlvbiB9KScsXG4gIFtWQUxJREFUSU9OX0NPREUuU0VMRUNUX0ZBQ1RPUllfTk9UX0NPTk5FQ1RFRF06ICgpID0+XG4gICAgJ1lvdSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgdGhlIE5HWFMgbW9kdWxlIScsXG4gIFtWQUxJREFUSU9OX0NPREUuQUNUSU9OX0RFQ09SQVRPUl06ICgpID0+XG4gICAgJ0BBY3Rpb24oKSBkZWNvcmF0b3IgY2Fubm90IGJlIHVzZWQgd2l0aCBzdGF0aWMgbWV0aG9kcycsXG4gIFtWQUxJREFUSU9OX0NPREUuU0VMRUNUT1JfREVDT1JBVE9SXTogKCkgPT4gJ1NlbGVjdG9ycyBvbmx5IHdvcmsgb24gbWV0aG9kcycsXG4gIFtWQUxJREFUSU9OX0NPREUuWk9ORV9XQVJOSU5HXTogKCkgPT5cbiAgICAnWW91ciBhcHBsaWNhdGlvbiB3YXMgYm9vdHN0cmFwcGVkIHdpdGggbm9vcGVkIHpvbmUgYW5kIHlvdXIgZXhlY3V0aW9uIHN0cmF0ZWd5IHJlcXVpcmVzIGFuIGFjdHVhbCBOZ1pvbmUhXFxuJyArXG4gICAgJ1BsZWFzZSBzZXQgdGhlIHZhbHVlIG9mIHRoZSBleGVjdXRpb25TdHJhdGVneSBwcm9wZXJ0eSB0byBOb29wTmd4c0V4ZWN1dGlvblN0cmF0ZWd5LlxcbicgK1xuICAgICdOZ3hzTW9kdWxlLmZvclJvb3Qoc3RhdGVzLCB7IGV4ZWN1dGlvblN0cmF0ZWd5OiBOb29wTmd4c0V4ZWN1dGlvblN0cmF0ZWd5IH0pJyxcbiAgW1ZBTElEQVRJT05fQ09ERS5QQVRDSElOR19BUlJBWV06ICgpID0+ICdQYXRjaGluZyBhcnJheXMgaXMgbm90IHN1cHBvcnRlZC4nLFxuICBbVkFMSURBVElPTl9DT0RFLlBBVENISU5HX1BSSU1JVElWRV06ICgpID0+ICdQYXRjaGluZyBwcmltaXRpdmVzIGlzIG5vdCBzdXBwb3J0ZWQuJyxcbiAgW1ZBTElEQVRJT05fQ09ERS5VTkRFQ09SQVRFRF9TVEFURV9JTl9JVlldOiAobmFtZTogc3RyaW5nKSA9PlxuICAgIGAnJHtuYW1lfScgY2xhc3Mgc2hvdWxkIGJlIGRlY29yYXRlZCB3aXRoIEBJbmplY3RhYmxlKCkgcmlnaHQgYWZ0ZXIgdGhlIEBTdGF0ZSgpIGRlY29yYXRvcmBcbn07XG4iXX0=