/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isDevMode } from '@angular/core';
import { ReplaySubject } from 'rxjs';
/**
 * Keep it as a single `const` variable since this `ReplaySubject`
 * will be private and accessible only within this file.
 * @type {?}
 */
const _ivyEnabledInDevMode$ = new ReplaySubject(1);
/**
 * Ivy exposes helper functions to the global `window.ng` object.
 * Those functions are `getComponent, getContext,
 * getListeners, getViewComponent, getHostElement, getInjector,
 * getRootComponents, getDirectives, getDebugNode`
 * Previously, old view engine exposed `window.ng.coreTokens` and
 * `window.ng.probe` if an application was in development/production.
 * Ivy doesn't expose these functions in production. Developers will be able
 * to see warnings in both JIT/AOT modes, but only if an application
 * is in development.
 * @return {?}
 */
export function setIvyEnabledInDevMode() {
    try {
        // `try-catch` will also handle server-side rendering, as
        // `window is not defined` will not be thrown.
        /** @type {?} */
        const ng = ((/** @type {?} */ (window))).ng;
        /** @type {?} */
        const _viewEngineEnabled = !!ng.probe && !!ng.coreTokens;
        /** @type {?} */
        const _ivyEnabledInDevMode = !_viewEngineEnabled && isDevMode();
        _ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);
    }
    catch (_a) {
        _ivyEnabledInDevMode$.next(false);
    }
    finally {
        _ivyEnabledInDevMode$.complete();
    }
}
/**
 * @return {?}
 */
export function ivyEnabledInDevMode() {
    return _ivyEnabledInDevMode$.asObservable();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXZ5LWVuYWJsZWQtaW4tZGV2LW1vZGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9pdnkvaXZ5LWVuYWJsZWQtaW4tZGV2LW1vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7O01BTTNDLHFCQUFxQixHQUFHLElBQUksYUFBYSxDQUFVLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7OztBQWEzRCxNQUFNLFVBQVUsc0JBQXNCO0lBQ3BDLElBQUk7Ozs7Y0FHSSxFQUFFLEdBQUcsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLEVBQUU7O2NBQ3ZCLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVTs7Y0FDbEQsb0JBQW9CLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxTQUFTLEVBQUU7UUFDL0QscUJBQXFCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7S0FDbEQ7SUFBQyxXQUFNO1FBQ04scUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ25DO1lBQVM7UUFDUixxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUNsQztBQUNILENBQUM7Ozs7QUFFRCxNQUFNLFVBQVUsbUJBQW1CO0lBQ2pDLE9BQU8scUJBQXFCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEtlZXAgaXQgYXMgYSBzaW5nbGUgYGNvbnN0YCB2YXJpYWJsZSBzaW5jZSB0aGlzIGBSZXBsYXlTdWJqZWN0YFxuICogd2lsbCBiZSBwcml2YXRlIGFuZCBhY2Nlc3NpYmxlIG9ubHkgd2l0aGluIHRoaXMgZmlsZS5cbiAqL1xuY29uc3QgX2l2eUVuYWJsZWRJbkRldk1vZGUkID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XG5cbi8qKlxuICogSXZ5IGV4cG9zZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB0aGUgZ2xvYmFsIGB3aW5kb3cubmdgIG9iamVjdC5cbiAqIFRob3NlIGZ1bmN0aW9ucyBhcmUgYGdldENvbXBvbmVudCwgZ2V0Q29udGV4dCxcbiAqIGdldExpc3RlbmVycywgZ2V0Vmlld0NvbXBvbmVudCwgZ2V0SG9zdEVsZW1lbnQsIGdldEluamVjdG9yLFxuICogZ2V0Um9vdENvbXBvbmVudHMsIGdldERpcmVjdGl2ZXMsIGdldERlYnVnTm9kZWBcbiAqIFByZXZpb3VzbHksIG9sZCB2aWV3IGVuZ2luZSBleHBvc2VkIGB3aW5kb3cubmcuY29yZVRva2Vuc2AgYW5kXG4gKiBgd2luZG93Lm5nLnByb2JlYCBpZiBhbiBhcHBsaWNhdGlvbiB3YXMgaW4gZGV2ZWxvcG1lbnQvcHJvZHVjdGlvbi5cbiAqIEl2eSBkb2Vzbid0IGV4cG9zZSB0aGVzZSBmdW5jdGlvbnMgaW4gcHJvZHVjdGlvbi4gRGV2ZWxvcGVycyB3aWxsIGJlIGFibGVcbiAqIHRvIHNlZSB3YXJuaW5ncyBpbiBib3RoIEpJVC9BT1QgbW9kZXMsIGJ1dCBvbmx5IGlmIGFuIGFwcGxpY2F0aW9uXG4gKiBpcyBpbiBkZXZlbG9wbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEl2eUVuYWJsZWRJbkRldk1vZGUoKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgLy8gYHRyeS1jYXRjaGAgd2lsbCBhbHNvIGhhbmRsZSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcsIGFzXG4gICAgLy8gYHdpbmRvdyBpcyBub3QgZGVmaW5lZGAgd2lsbCBub3QgYmUgdGhyb3duLlxuICAgIGNvbnN0IG5nID0gKHdpbmRvdyBhcyBhbnkpLm5nO1xuICAgIGNvbnN0IF92aWV3RW5naW5lRW5hYmxlZCA9ICEhbmcucHJvYmUgJiYgISFuZy5jb3JlVG9rZW5zO1xuICAgIGNvbnN0IF9pdnlFbmFibGVkSW5EZXZNb2RlID0gIV92aWV3RW5naW5lRW5hYmxlZCAmJiBpc0Rldk1vZGUoKTtcbiAgICBfaXZ5RW5hYmxlZEluRGV2TW9kZSQubmV4dChfaXZ5RW5hYmxlZEluRGV2TW9kZSk7XG4gIH0gY2F0Y2gge1xuICAgIF9pdnlFbmFibGVkSW5EZXZNb2RlJC5uZXh0KGZhbHNlKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXZ5RW5hYmxlZEluRGV2TW9kZSQuY29tcGxldGUoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXZ5RW5hYmxlZEluRGV2TW9kZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgcmV0dXJuIF9pdnlFbmFibGVkSW5EZXZNb2RlJC5hc09ic2VydmFibGUoKTtcbn1cbiJdfQ==